target= data.frame("P50"= sample(result@U[2,50], samplesize), "P75"= sample(result@U[2,75],samplesize))/sum(u0) # prevalence at times 50 and 75
return(plot(result))
#return(target)
}
modelABC(c(0.5,0.025),100000,0.1,10)
target
target
modelABC= function(parameters,N,inf,samplesize){
library(SimInf)
u0 = data.frame(S=c((1-inf)*N), I=c(inf*N), R=c(0))    #specifying initial compartmental values
model <- SIR(u0, 1:75, beta=parameters[1], gamma=parameters[2]) # specifying the model
result <- run(model, threads = 1)     # running the model
pop= numeric()
pop[1]=result@U[2,50]   # number of infected individuals at time 50
pop[2]=result@U[2,75]  # number of infected individuals at time 75
target= data.frame("P50"= sample(result@U[2,50], samplesize), "P75"= sample(result@U[2,75],samplesize))/sum(u0) # prevalence at times 50 and 75
return(plot(result))
#return(target)
}
target
return(target)
modelABC= function(parameters,N,inf,samplesize){
library(SimInf)
u0 = data.frame(S=c((1-inf)*N), I=c(inf*N), R=c(0))    #specifying initial compartmental values
model <- SIR(u0, 1:75, beta=parameters[1], gamma=parameters[2]) # specifying the model
result <- run(model, threads = 1)     # running the model
pop= numeric()
pop[1]=result@U[2,50]   # number of infected individuals at time 50
pop[2]=result@U[2,75]  # number of infected individuals at time 75
target= data.frame("P50"= sample(result@U[2,50], samplesize), "P75"= sample(result@U[2,75],samplesize))/sum(u0) # prevalence at times 50 and 75
return(plot(result))
return(target)
}
modelABC(c(0.5,0.025),100000,0.1,10)
target
modelABC= function(parameters,N,inf,samplesize){
library(SimInf)
u0 = data.frame(S=c((1-inf)*N), I=c(inf*N), R=c(0))    #specifying initial compartmental values
model <- SIR(u0, 1:75, beta=parameters[1], gamma=parameters[2]) # specifying the model
result <- run(model, threads = 1)     # running the model
pop= numeric()
pop[1]=result@U[2,50]   # number of infected individuals at time 50
pop[2]=result@U[2,75]  # number of infected individuals at time 75
target= data.frame("P50"= sample(result@U[2,50], samplesize), "P75"= sample(result@U[2,75],samplesize))/sum(u0) # prevalence at times 50 and 75
return(plot(result))
return(target)
}
target
target_1 = data.frame("P50"= sample(result@U[2,50], 100), "P75"= sample(result@U[2,75],100))/sum(u0)
target_1
target_1 = data.frame("Prev@50"= sample(result@U[2,50], 100), "Prev@75"= sample(result@U[2,75],100))/sum(u0)
target_1
target ######
u0 = data.frame(S=c(90000), I=c(10000), R=c(0))    #specifying initial compartmental values
model <- SIR(u0, 1:75, beta=0.5, gamma=0.025) # specifying the model
result <- run(model, threads = 1)
resultst50= c(result@U[1,50], result@U[2,50], result@U[3,50])
sum(resultst50)
result@U
?sample
target_1 = data.frame("Prev@50"= sample(result@U[2,50], 100), "Prev@75"= sample(result@U[2,75],100))/sum(u0)
target_1
target = data.frame("Prev@50"= sample(result@U[2,50], 100), "Prev@75"= sample(result@U[2,75],100))
target
modelABC= function(parameters,N,inf,samplesize){
library(SimInf)
u0 = data.frame(S=c((1-inf)*N), I=c(inf*N), R=c(0))    #specifying initial compartmental values
model <- SIR(u0, 1:75, beta=parameters[1], gamma=parameters[2]) # specifying the model
result <- run(model, threads = 1)     # running the model
pop= numeric()
pop[1]=result@U[2,50]   # number of infected individuals at time 50
pop[2]=result@U[2,75]  # number of infected individuals at time 75
target= data.frame("Prev@50"= sample(result@U[2,50], samplesize), "Prev@75"= sample(result@U[2,75],samplesize))/sum(u0) # prevalence at times 50 and 75
return(list(plot(result), target))
#return(target)
}
modelABC(c(0.5,0.025),100000,0.1,10)
modelABC(c(0.5,0.025),100000,0.1,10)[[2]]
# creating a loop around the function
set.seed(123)
save_prevs= as.list(rep(NA, 100)) # a 10000x2 matrix that receives the prevalences at 50 and 75 per model run
#target_1= matrix(c(0,0),100,2)
for(i in 1:100){
save_prevs[i,]= modelABC(c(0.5,0.025),100000)[[2]]
# target_1=c(sample(result@U[2,50],100), sample(result@U[2,75],100))
}
# creating a loop around the function
set.seed(123)
save_prevs= as.list(rep(NA, 100)) # a 10000x2 matrix that receives the prevalences at 50 and 75 per model run
#target_1= matrix(c(0,0),100,2)
for(i in 1:100){
save_prevs[i,]= modelABC(c(0.5,0.025),100000,0.1,10)[[2]]
# target_1=c(sample(result@U[2,50],100), sample(result@U[2,75],100))
}
modelABC(c(0.5,0.025),100000,0.1,10)[[2]]
as.list(rep(NA, 100))
#target_1= matrix(c(0,0),100,2)
for(i in 1:100){
save_prevs[i,]= modelABC(c(0.5,0.025),100000,0.1,10)[[2]]
# target_1=c(sample(result@U[2,50],100), sample(result@U[2,75],100))
}
#target_1= matrix(c(0,0),100,2)
for(i in 1:100){
save_prevs[[i]]= modelABC(c(0.5,0.025),100000,0.1,10)[[2]]
# target_1=c(sample(result@U[2,50],100), sample(result@U[2,75],100))
}
save_prevs
as.list(rep(NA, 100))
#target_1= matrix(c(0,0),100,2)
for(i in 1:100){
save_prevs[[i]]= modelABC(c(0.5,0.025),100000,0.1,10)[[2]]
# target_1=c(sample(result@U[2,50],100), sample(result@U[2,75],100))
}
save_prevs
bind_rows(save_prevs, .id = "column_label")
library(diplyr)
library(dplyr)
library(EasyABC)
library(SimInf)
u0 = data.frame(S=c(90000), I=c(10000), R=c(0))    #specifying initial compartmental values
model <- SIR(u0, 1:75, beta=0.5, gamma=0.025) # specifying the model
result <- run(model, threads = 1)
resultst50= c(result@U[1,50], result@U[2,50], result@U[3,50])
sum(resultst50)
resultst75= c(result@U[1,75], result@U[2,75], result@U[3,75])
sum(resultst75)
target_1 = data.frame("Prev@50"= sample(result@U[2,50], 100), "Prev@75"= sample(result@U[2,75],100))/sum(u0)
target = data.frame("Prev@50"= sample(result@U[2,50], 100), "Prev@75"= sample(result@U[2,75],100))
modelABC= function(parameters,N,inf,samplesize){
library(SimInf)
u0 = data.frame(S=c((1-inf)*N), I=c(inf*N), R=c(0))    #specifying initial compartmental values
model <- SIR(u0, 1:75, beta=parameters[1], gamma=parameters[2]) # specifying the model
result <- run(model, threads = 1)     # running the model
pop= numeric()
pop[1]=result@U[2,50]   # number of infected individuals at time 50
pop[2]=result@U[2,75]  # number of infected individuals at time 75
target= data.frame("Prev@50"= sample(result@U[2,50], samplesize), "Prev@75"= sample(result@U[2,75],samplesize))/sum(u0) # prevalence at times 50 and 75
return(list(plot(result), target))
#return(target)
}
modelABC= function(parameters,N,inf,samplesize){
library(SimInf)
u0 = data.frame(S=c((1-inf)*N), I=c(inf*N), R=c(0))    #specifying initial compartmental values
model <- SIR(u0, 1:75, beta=parameters[1], gamma=parameters[2]) # specifying the model
result <- run(model, threads = 1)     # running the model
pop= numeric()
pop[1]=result@U[2,50]   # number of infected individuals at time 50
pop[2]=result@U[2,75]  # number of infected individuals at time 75
target= data.frame("Prev@50"= sample(result@U[2,50], samplesize), "Prev@75"= sample(result@U[2,75],samplesize))/sum(u0) # prevalence at times 50 and 75
return(list(plot(result), target))
}
modelABC(c(0.5,0.025),100000,0.1,10)[[2]]
target = data.frame("Prev@50"= sample(result@U[2,50], 100), "Prev@75"= sample(result@U[2,75],100))
mean(target)
mean(target[1])
mean(target[2])
mean(target[1:100,1])
target = data.frame("Prev@50"= sample(result@U[2,50], 1000), "Prev@75"= sample(result@U[2,75],1000))
mean(target[1:1000,1])
c(mean(target[1:1000,1]),mean(target[1:1000,2]))
target = data.frame("Prev@50"= sample(result@U[2,50], 100), "Prev@75"= sample(result@U[2,75],100))
c(mean(target[1:100,1]), mean(target[1:100,2]))
target = data.frame("Prev@50"= sample(result@U[2,50], 10), "Prev@75"= sample(result@U[2,75],10))
c(mean(target[1:10,1]), mean(target[1:10,2]))
target = data.frame("Prev@50"= sample(result@U[2,50], 100000), "Prev@75"= sample(result@U[2,75],100000))
target = data.frame("Prev@50"= sample(result@U[2,50], 30000), "Prev@75"= sample(result@U[2,75],10000))
c(mean(target[1:30000,1]), mean(target[1:10000,2]))
target = data.frame("Prev@50"= sample(result@U[2,50], 90), "Prev@75"= sample(result@U[2,75],90))
c(mean(target[1:90,1]), mean(target[1:90,2]))
modelABC= function(parameters,N,inf,samplesize){
library(SimInf)
u0 = data.frame(S=c((1-inf)*N), I=c(inf*N), R=c(0))    #specifying initial compartmental values
model <- SIR(u0, 1:75, beta=parameters[1], gamma=parameters[2]) # specifying the model
result <- run(model, threads = 1)     # running the model
target= data.frame("Prev@50"= sample(result@U[2,50], samplesize), "Prev@75"= sample(result@U[2,75],samplesize))/sum(u0) # prevalence at times 50 and 75
return(list(plot(result), target))
}
modelABC(c(0.5,0.025),100000,0.1,10)[[2]]
target= data.frame("Prev@50"= sample(result@U[2,50], samplesize), "Prev@75"= sample(result@U[2,75],samplesize)) # prevalence at times 50 and 75
modelABC= function(parameters,N,inf,samplesize){
library(SimInf)
u0 = data.frame(S=c((1-inf)*N), I=c(inf*N), R=c(0))    #specifying initial compartmental values
model <- SIR(u0, 1:75, beta=parameters[1], gamma=parameters[2]) # specifying the model
result <- run(model, threads = 1)     # running the model
target= data.frame("Prev@50"= sample(result@U[2,50], samplesize), "Prev@75"= sample(result@U[2,75],samplesize)) # prevalence at times 50 and 75
return(list(plot(result), target))
}
modelABC(c(0.5,0.025),100000,0.1,10)[[2]]
modelABC= function(parameters,N,inf,samplesize){
library(SimInf)
u0 = data.frame(S=c((1-inf)*N), I=c(inf*N), R=c(0))    #specifying initial compartmental values
model <- SIR(u0, 1:75, beta=parameters[1], gamma=parameters[2]) # specifying the model
result <- run(model, threads = 1)     # running the model
target= as.data.frame("Prev@50"= sample(result@U[2,50], samplesize), "Prev@75"= sample(result@U[2,75],samplesize)) # prevalence at times 50 and 75
return(list(plot(result), target))
}
modelABC(c(0.5,0.025),100000,0.1,10)[[2]]
modelABC= function(parameters,N,inf,samplesize){
library(SimInf)
u0 = data.frame(S=c((1-inf)*N), I=c(inf*N), R=c(0))    #specifying initial compartmental values
model <- SIR(u0, 1:75, beta=parameters[1], gamma=parameters[2]) # specifying the model
result <- run(model, threads = 1)     # running the model
target= data.frame("Prev@50"= sample(result@U[2,50], samplesize), "Prev@75"= sample(result@U[2,75],samplesize)) # prevalence at times 50 and 75
return(list(plot(result), target))
}
modelABC(c(0.5,0.025),100000,0.1,10)[[2]]
target_1 = as.data.frame("Prev@50"= sample(result@U[2,50], 10), "Prev@75"= sample(result@U[2,75],10))
library(EasyABC)
library(SimInf)
u0 = data.frame(S=c(90000), I=c(10000), R=c(0))    #specifying initial compartmental values
model <- SIR(u0, 1:75, beta=0.5, gamma=0.025) # specifying the model
result <- run(model, threads = 1)
resultst50= c(result@U[1,50], result@U[2,50], result@U[3,50])
sum(resultst50)
resultst75= c(result@U[1,75], result@U[2,75], result@U[3,75])
sum(resultst75)
target_1 = data.frame("Prev@50"= sample(result@U[2,50], 10), "Prev@75"= sample(result@U[2,75],10))
target1 = data.frame("Prev@50"= sample(result@U[2,50], 10), "Prev@75"= sample(result@U[2,75],10))
target_1 = data.frame("Prev@50"= sample(result@U[2,50], 10), "Prev@75"= sample(result@U[2,75],10))/sum(u0)
modelABC= function(parameters,N,inf,samplesize){
library(SimInf)
u0 = data.frame(S=c((1-inf)*N), I=c(inf*N), R=c(0))    #specifying initial compartmental values
model <- SIR(u0, 1:75, beta=parameters[1], gamma=parameters[2]) # specifying the model
result <- run(model, threads = 1)     # running the model
target= data.frame("Prev@50"= sample(result@U[2,50], samplesize), "Prev@75"= sample(result@U[2,75],samplesize)) # prevalence at times 50 and 75
return(list(plot(result), target))
}
modelABC(c(0.5,0.025),100000,0.1,10)[[2]]
# running the model 100 times
set.seed(123)
save_prevs= as.list(rep(NA, 100)) # a 10000x2 matrix that receives the prevalences at 50 and 75 per model run
for(i in 1:100){
save_prevs[[i]]= modelABC(c(0.5,0.025),100000,0.1,10)[[2]]
}
save_prevs
modelABC= function(parameters,N,inf,samplesize){
library(SimInf)
u0 = data.frame(S=c((1-inf)*N), I=c(inf*N), R=c(0))    #specifying initial compartmental values
model <- SIR(u0, 1:75, beta=parameters[1], gamma=parameters[2]) # specifying the model
result <- run(model, threads = 1)     # running the model
target= data.frame("Prev@50"= sample(result@U[2,50], samplesize), "Prev@75"= sample(result@U[2,75],samplesize)) # prevalence at times 50 and 75
return(target)
# return(list(plot(result), target))
}
modelABC(c(0.5,0.025),100000,0.1,10)
library(EasyABC)
library(SimInf)
u0 = data.frame(S=c(90000), I=c(10000), R=c(0))    #specifying initial compartmental values
model <- SIR(u0, 1:75, beta=0.5, gamma=0.025) # specifying the model
result <- run(model, threads = 1)
resultst50= c(result@U[1,50], result@U[2,50], result@U[3,50])
sum(resultst50)
resultst75= c(result@U[1,75], result@U[2,75], result@U[3,75])
sum(resultst75)
target1 = data.frame("Prev@50"= sample(result@U[2,50], 10), "Prev@75"= sample(result@U[2,75],10))
target_1 = data.frame("Prev@50"= sample(result@U[2,50], 10), "Prev@75"= sample(result@U[2,75],10))/sum(u0)
modelABC= function(parameters,N,inf,samplesize){
library(SimInf)
u0 = data.frame(S=c((1-inf)*N), I=c(inf*N), R=c(0))    #specifying initial compartmental values
model <- SIR(u0, 1:75, beta=parameters[1], gamma=parameters[2]) # specifying the model
result <- run(model, threads = 1)     # running the model
target= data.frame("Prev@50"= sample(result@U[2,50], samplesize), "Prev@75"= sample(result@U[2,75],samplesize)) # prevalence at times 50 and 75
return(target)
# return(list(plot(result), target))
}
modelABC(c(0.5,0.025),100000,0.1,10)
plot(result)
# running the model 100 times
set.seed(123)
save_prevs= as.list(rep(NA, 100)) # a 10000x2 matrix that receives the prevalences at 50 and 75 per model run
for(i in 1:100){
save_prevs[[i]]= modelABC(c(0.5,0.025),100000,0.1,10)
# save_prevs[[i]]= modelABC(c(0.5,0.025),100000,0.1,10)[[2]]
}
save_prevs
modelABC= function(parameters,N,inf,samplesize){
library(SimInf)
u0 = data.frame(S=c((1-inf)*N), I=c(inf*N), R=c(0))    #specifying initial compartmental values
model <- SIR(u0, 1:75, beta=parameters[1], gamma=parameters[2]) # specifying the model
result <- run(model, threads = 1)     # running the model
target= data.frame("Prev@50"= sample(result@U[2,50], samplesize), "Prev@75"= sample(result@U[2,75],samplesize)) # prevalence at times 50 and 75
#return(target)
return(list(max(result@U[2,]), target))
}
#modelABC(c(0.5,0.025),100000,0.1,10)
modelABC(c(0.5,0.025),100000,0.1,10)[[2]]
# running the model 100 times
set.seed(123)
save_prevs= as.list(rep(NA, 100)) # a 10000x2 matrix that receives the prevalences at 50 and 75 per model run
for(i in 1:100){
# save_prevs[[i]]= modelABC(c(0.5,0.025),100000,0.1,10)
save_prevs[[i]]= modelABC(c(0.5,0.025),100000,0.1,10)[[2]]
}
save_prevs
#modelABC(c(0.5,0.025),100000,0.1,10)
modelABC(c(0.5,0.025),100000,0.1,10)
modelABC= function(parameters,N,inf,samplesize){
library(SimInf)
u0 = data.frame(S=c((1-inf)*N), I=c(inf*N), R=c(0))    #specifying initial compartmental values
model <- SIR(u0, 1:75, beta=parameters[1], gamma=parameters[2]) # specifying the model
result <- run(model, threads = 1)     # running the model
target= data.frame("Prev@50"= sample(result@U[2,50], samplesize), "Prev@75"= sample(result@U[2,75],samplesize)) # prevalence at times 50 and 75
#return(target)
return(list(max(result@U[2,]), which.max(result@U[2,]), target))
}
#modelABC(c(0.5,0.025),100000,0.1,10)[[2]]
modelABC(c(0.5,0.025),100000,0.1,10)
plot(result)
# running the model 100 times
set.seed(123)
save_prevs= as.list(rep(NA, 100)) # a 10000x2 matrix that receives the prevalences at 50 and 75 per model run
for(i in 1:100){
# save_prevs[[i]]= modelABC(c(0.5,0.025),100000,0.1,10)[[2]]
save_prevs[[i]]= modelABC(c(0.5,0.025),100000,0.1,10)
}
save_prevs
library(EasyABC)
library(SimInf)
u0 = data.frame(S=c(90000), I=c(10000), R=c(0))    #specifying initial compartmental values
model <- SIR(u0, 1:75, beta=0.5, gamma=0.025) # specifying the model
result <- run(model, threads = 1)
resultst50= c(result@U[1,50], result@U[2,50], result@U[3,50])
sum(resultst50)
resultst75= c(result@U[1,75], result@U[2,75], result@U[3,75])
sum(resultst75)
target1 = data.frame("Prev@50"= sample(result@U[2,50], 10), "Prev@75"= sample(result@U[2,75],10))
modelABC= function(parameters,N,inf,samplesize){
library(SimInf)
u0 = data.frame(S=c((1-inf)*N), I=c(inf*N), R=c(0))    #specifying initial compartmental values
model <- SIR(u0, 1:75, beta=parameters[1], gamma=parameters[2]) # specifying the model
result <- run(model, threads = 1)     # running the model
target= data.frame("Prev@50"= sample(result@U[2,50], samplesize), "Prev@75"= sample(result@U[2,75],samplesize)) # prevalence at times 50 and 75
#return(target)
return(list(max(result@U[2,]), which.max(result@U[2,]), target))
}
#modelABC(c(0.5,0.025),100000,0.1,10)[[2]]
modelABC(c(0.5,0.025),100000,0.1,10)
plot(result)
# running the model 100 times
#set.seed(123)
save_prevs= as.list(rep(NA, 100)) # a 10000x2 matrix that receives the prevalences at 50 and 75 per model run
for(i in 1:100){
# save_prevs[[i]]= modelABC(c(0.5,0.025),100000,0.1,10)[[2]]
save_prevs[[i]]= modelABC(c(0.5,0.025),100000,0.1,10)
}
save_prevs
library(EasyABC)
library(SimInf)
u0 = data.frame(S=c(90000), I=c(10000), R=c(0))    #specifying initial compartmental values
model <- SIR(u0, 1:75, beta=0.5, gamma=0.025) # specifying the model
result <- run(model, threads = 1)
resultst50= c(result@U[1,50], result@U[2,50], result@U[3,50])
sum(resultst50)
resultst75= c(result@U[1,75], result@U[2,75], result@U[3,75])
sum(resultst75)
target1 = data.frame("Prev@50"= sample(result@U[2,50], 10, prob = result@U[2,50]/100000), "Prev@75"= sample(result@U[2,75],10, prob = result@U[2,75]/100000))
u0 = data.frame(S=c(90000), I=c(10000), R=c(0))    #specifying initial compartmental values
model <- SIR(u0, 1:75, beta=0.5, gamma=0.025) # specifying the model
result <- run(model, threads = 1)
plot(result)
resultst50= c(result@U[1,50], result@U[2,50], result@U[3,50])
sum(resultst50)
target1 = data.frame(sample(result@U[2,50],100), sample(result@U[2,75],100))
modelABC= function(parameters,N,inf=0.1){
library(SimInf)
u0 = data.frame(S=c((1-inf)*N), I=c(inf*N), R=c(0))    #specifying initial compartmental values
model <- SIR(u0, 1:75, beta=parameters[1], gamma=parameters[2]) # specifying the model
result <- run(model, threads = 1)     # running the model
pop= numeric()
pop[1]=result@U[2,50]   # number of infected individuals at time 50
pop[2]=result@U[2,75]  # number of infected individuals at time 75
prevs=pop/sum(u0) # prevalence at times 50 and 75
#return(prevs)
return(plot(result))
}
res1= modelABC(c(0.5,0.025),100000)
for(i in 1:10000){
xsamp= sample(x=c("S","I","R"),prob= resultst50/10000, size= 1000, replace=T)
summat[i,]= summary(as.factor(xsamp))
}
summat= matrix(c(0,0),10000,2) # a 10000x2 matrix that receives the prevalences at 50 and 75 per model run
for(i in 1:10000){
xsamp= sample(x=c("S","I","R"),prob= resultst50/10000, size= 1000, replace=T)
summat[i,]= summary(as.factor(xsamp))
}
mean(summat[,1])
xsamp
?sample
target1 = data.frame("Prev@50"= sample(result@U[2,50], 10, prob = result@U[2,50]/100000, replace=T), "Prev@75"= sample(result@U[2,75],10, prob = result@U[2,75]/100000,replace=T))
summary(as.factor(xsamp))
target1 = data.frame("Prev@50"= sample(result@U[2,50], 10, prob = result@U[2,50]/100000), "Prev@75"= sample(result@U[2,75],10, prob = result@U[2,75]/100000))
library(EasyABC)
library(SimInf)
u0 = data.frame(S=c(90000), I=c(10000), R=c(0))    #specifying initial compartmental values
model <- SIR(u0, 1:75, beta=0.5, gamma=0.025) # specifying the model
result <- run(model, threads = 1)
resultst50= c(result@U[1,50], result@U[2,50], result@U[3,50])
sum(resultst50)
resultst75= c(result@U[1,75], result@U[2,75], result@U[3,75])
sum(resultst75)
target1 = data.frame("Prev@50"= sample(result@U[2,50], 10), "Prev@75"= sample(result@U[2,75],10))
modelABC= function(parameters,N,inf,samplesize){
library(SimInf)
u0 = data.frame(S=c((1-inf)*N), I=c(inf*N), R=c(0))    #specifying initial compartmental values
model <- SIR(u0, 1:75, beta=parameters[1], gamma=parameters[2]) # specifying the model
result <- run(model, threads = 1)     # running the model
target= data.frame("Prev@50"= sample(result@U[2,50], samplesize), "Prev@75"= sample(result@U[2,75],samplesize)) # prevalence at times 50 and 75
#return(target)
return(list(max(result@U[2,]), which.max(result@U[2,]), target))
}
#modelABC(c(0.5,0.025),100000,0.1,10)[[2]]
modelABC(c(0.5,0.025),100000,0.1,10)
plot(result)
# running the model 100 times
set.seed(123)
save_prevs= as.list(rep(NA, 100)) # a 10000x2 matrix that receives the prevalences at 50 and 75 per model run
for(i in 1:100){
# save_prevs[[i]]= modelABC(c(0.5,0.025),100000,0.1,10)[[2]]
save_prevs[[i]]= modelABC(c(0.5,0.025),100000,0.1,10)
}
save_prevs
library(EasyABC)
library(SimInf)
u0 = data.frame(S=c(90000), I=c(10000), R=c(0))    #specifying initial compartmental values
model <- SIR(u0, 1:75, beta=0.5, gamma=0.025) # specifying the model
result <- run(model, threads = 1, seed=sample.int(1000000000,1))
resultst50= c(result@U[1,50], result@U[2,50], result@U[3,50])
sum(resultst50)
resultst75= c(result@U[1,75], result@U[2,75], result@U[3,75])
sum(resultst75)
target1 = data.frame("Prev@50"= sample(result@U[2,50], 10), "Prev@75"= sample(result@U[2,75],10))
target1
result <- run(model, threads = 1, seed=sample.int(10000,1))
### take care that model was specified ok, otherwise error when applying ABC_mcmc
u0= data.frame(S=c(990), I=c(10), R=c(0))
### scale parameters
x= 1 ## such that beta is 0.1*1=0.1    # was:0.05
y= 1 ## such that gamma is 0.02*0.1=0.02     # was:0.2598
### example
# small example of how to pull the number infected from the output of a model run
model <- SIR(u0, 1:75, beta= 0.2, gamma=0.02)
#result <- run(model, threads = 1, seed=sample.int(1000000000,1))
result <- run(model, threads = 1)
plot(result)
abline(v=50)
str(result)
result@U[2,1] ### get number infected at time=1
### create function to use in ABC_mcmc
modelforABCmcmc2= function(parameters){
library(SimInf)
u0= data.frame(S=c(990), I=c(10), R=c(0))
model <- SIR(u0, 1:75, beta= parameters[1], gamma=parameters[2])
#result <- run(model, threads = 1, seed=sample.int(1000000000,1))
result <- run(model, threads = 1)
pop[1]=result@U[2,50]
pop[2]=result@U[2,75]
return(pop/sum(u0))
}
pop= numeric()
### try running it once, should return two population prevalence percentages
modelforABCmcmc2(c(0.2,0.02))
### set.seed for reproducability
set.seed(123)
### save the results from 10000 runs, take the means as the targets
saveres= matrix(c(0,0),10000,2)
for(i in 1:10000){
saveres[i,]= modelforABCmcmc2(c(0.2,0.02))
}
hist(saveres[,1])
hist(saveres[,2])
mean(saveres[,1])
mean(saveres[,2])
### we call the target: truepop.prev
truepop.prev= c(round(mean(saveres[,1]),3), round(mean(saveres[,2]),3))
truepop.prev
plot(saveres[,1], saveres[,2], pch=16)
points(mean(saveres[,1]), mean(saveres[,2]), cex=1.5, col="red", pch=16)
library(EasyABC)
library(SimInf)
parameters=c(0.8,0.02)
u0 = data.frame(S=c(90000), I=c(10000), R=c(0))    #specifying initial compartmental values
model <- SIR(u0, 1:75, beta=parameters[1], gamma=parameters[2]) # specifying the model
result1 <- run(model, threads = 1)
plot(result1)
modelABC= function(parameter,N=100000,inf=0.1){
u0 = data.frame(S=c((1-inf)*N), I=c(inf*N), R=c(0))    #specifying initial compartmental values
model <- SIR(u0, 1:75, beta=parameter[1], gamma=parameter[2]) # specifying the model
result <- run(model, threads = 1)     # running the model
time_50<- c(rep("S",result@U[1,50]),rep("I",result@U[2,50]),rep("R",result@U[3,50])) #replicate something a number of times
samplefrom50<- sample(time_50, size=100)
time_75<- c(rep("S",result@U[1,75]),rep("I",result@U[2,75]),rep("R",result@U[3,75])) #replicate something a number of times
samplefrom75<- sample(time_75, size=100)
targetS<- c(summary(as.factor(samplefrom50)), summary(as.factor(samplefrom75)))
output <- targetS[names(targetS)=="I"]
model_output<-matrix(output,1,2)
#colnames(model_output) <- c("I","I")
return(model_output)
}
modelABC(c(0.8,0.02),100000,0.1)
set.seed(123)
save_targets1= matrix(c(0,0),100,2) # a 10000x2 matrix that receives the prevalences at 50 and 75 per model run
#colnames(save_targets1) <- c("I","I")
for(i in 1:100){
save_targets1[i,]= modelABC(c(0.8,0.02),100000,0.1)
}
# obtaining the targets as the mean number of infected at the time points
save_targ1 = c(ceiling(mean(save_targets1[,1])),ceiling(mean(save_targets1[,2])))
nrepseq=400
#alpha=0.5 by default
set.seed(123)
ABC_seq1<-ABC_sequential(method="Lenormand", model=modelABC, prior=list(c("unif",0,1), c("unif",0,0.5)), nb_simul=nrepseq,
summary_stat_target=c(save_targ1), p_acc_min=0.2, progress_bar = T)
